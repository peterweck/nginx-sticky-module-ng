Url https://github.com/thomsonreuters/nginx-sticky-module-ng/commit/05c9b00531d0499898ba429bdd8904578c3561d1
From 05c9b00531d0499898ba429bdd8904578c3561d1 Mon Sep 17 00:00:00 2001
From: Jonathan Huot <jonathan.huot@thomsonreuters.com>
Date: Wed, 14 Jun 2017 19:03:07 +0200
Subject: [PATCH] Hashes are using server string instead of sockaddr

Rationale of this is to be able to compute hash when we know the algorithms. If hashes are using sockaddr, we must know the IP, which is volatile in our cloud world
---
 ngx_http_sticky_misc.c   | 35 +++--------------------------------
 ngx_http_sticky_misc.h   |  2 +-
 ngx_http_sticky_module.c |  6 +++---
 3 files changed, 7 insertions(+), 36 deletions(-)

diff --git a/ngx_http_sticky_misc.c b/ngx_http_sticky_misc.c
index 0a3548c..ddf8162 100644
--- a/ngx_http_sticky_misc.c
+++ b/ngx_http_sticky_misc.c
@@ -285,49 +285,20 @@ ngx_int_t ngx_http_sticky_misc_hmac_sha1(ngx_pool_t *pool, void *in, size_t len,
   return NGX_OK;
 }
 
-ngx_int_t ngx_http_sticky_misc_text_raw(ngx_pool_t *pool, struct sockaddr *in, ngx_str_t *digest)
+ngx_int_t ngx_http_sticky_misc_text_raw(ngx_pool_t *pool, void *in, size_t len, ngx_str_t *digest)
 {
-  size_t len;
   if (!in) {
     return NGX_ERROR;
   }
 
-  switch (in->sa_family) {
-    case AF_INET:
-      len = NGX_INET_ADDRSTRLEN + sizeof(":65535") - 1;
-      break;
-
-#if (NGX_HAVE_INET6)
-    case AF_INET6:
-      len = NGX_INET6_ADDRSTRLEN + sizeof(":65535") - 1;
-      break;
-#endif
-
-#if (NGX_HAVE_UNIX_DOMAIN)
-    case AF_UNIX:
-      len = sizeof("unix:") - 1 + NGX_UNIX_ADDRSTRLEN;
-      break;
-#endif
-
-    default:
-      return NGX_ERROR;
-  }
-
-
   digest->data = ngx_pnalloc(pool, len);
   if (digest->data == NULL) {
     return NGX_ERROR;
   }
-
-  /* https://bitbucket.org/nginx-goodies/nginx-sticky-module-ng/issue/1/nginx-158-api-change-for-ngx_sock_ntop */
-#if defined(nginx_version) && nginx_version >= 1005003
-    digest->len = ngx_sock_ntop(in, sizeof(struct sockaddr_in), digest->data, len, 1);
-#else
-    digest->len = ngx_sock_ntop(in, digest->data, len, 1);
-#endif
+  memcpy(digest->data, in, len);
+  digest->len = len;
 
   return NGX_OK;
-
 }
 
 ngx_int_t ngx_http_sticky_misc_text_md5(ngx_pool_t *pool, struct sockaddr *in, ngx_str_t *digest)
diff --git a/ngx_http_sticky_misc.h b/ngx_http_sticky_misc.h
index bb5cd8c..97a7db3 100644
--- a/ngx_http_sticky_misc.h
+++ b/ngx_http_sticky_misc.h
@@ -13,7 +13,7 @@
 
 typedef ngx_int_t (*ngx_http_sticky_misc_hash_pt)(ngx_pool_t *pool, void *in, size_t len, ngx_str_t *digest);
 typedef ngx_int_t (*ngx_http_sticky_misc_hmac_pt)(ngx_pool_t *pool, void *in, size_t len, ngx_str_t *key, ngx_str_t *digest);
-typedef ngx_int_t (*ngx_http_sticky_misc_text_pt)(ngx_pool_t *pool, struct sockaddr *in, ngx_str_t *digest);
+typedef ngx_int_t (*ngx_http_sticky_misc_text_pt)(ngx_pool_t *pool, void *in, size_t len, ngx_str_t *digest);
 
 ngx_int_t ngx_http_sticky_misc_set_cookie (ngx_http_request_t *r, ngx_str_t *name, ngx_str_t *value, ngx_str_t *domain, ngx_str_t *path, time_t expires, unsigned secure, unsigned httponly);
 ngx_int_t ngx_http_sticky_misc_md5(ngx_pool_t *pool, void *in, size_t len, ngx_str_t *digest);
diff --git a/ngx_http_sticky_module.c b/ngx_http_sticky_module.c
index 55f2522..e7d5421 100644
--- a/ngx_http_sticky_module.c
+++ b/ngx_http_sticky_module.c
@@ -162,15 +162,15 @@ ngx_int_t ngx_http_init_upstream_sticky(ngx_conf_t *cf, ngx_http_upstream_srv_co
 
 		if (conf->hmac) {
 			/* generate hmac */
-			conf->hmac(cf->pool, rr_peers->peer[i].sockaddr, rr_peers->peer[i].socklen, &conf->hmac_key, &conf->peers[i].digest);
+			conf->hmac(cf->pool, rr_peers->peer[i].server.data, rr_peers->peer[i].server.len, &conf->hmac_key, &conf->peers[i].digest);
 
 		} else if (conf->text) {
 			/* generate text */
-			conf->text(cf->pool, rr_peers->peer[i].sockaddr, &conf->peers[i].digest);
+			conf->text(cf->pool, rr_peers->peer[i].server.data, rr_peers->peer[i].server.len, &conf->peers[i].digest);
 
 		} else {
 			/* generate hash */
-			conf->hash(cf->pool, rr_peers->peer[i].sockaddr, rr_peers->peer[i].socklen, &conf->peers[i].digest);
+			conf->hash(cf->pool, rr_peers->peer[i].server.data, rr_peers->peer[i].server.len, &conf->peers[i].digest);
 		}
 
 #if 0
-- 
2.13.5 (Apple Git-94)

